✔ Preparing framework
✖ Executing: norminette
ft_memset.c: OK!
ft_isascii.c: OK!
ft_strlcpy.c: OK!
ft_memmove.c: Error!
Error: SPACE_REPLACE_TAB    (line:  18, col:  18):      Found space when expecting tab
ft_tolower.c: OK!
ft_strnstr.c: OK!
ft_memchr.c: OK!
ft_bzero.c: OK!
ft_memcmp.c: OK!
ft_isalnum.c: OK!
ft_strncmp.c: OK!
ft_isdigit.c: OK!
ft_isalpha.c: OK!
ft_strchr.c: OK!
ft_toupper.c: OK!
ft_strdup.c: Error!
Error: CONSECUTIVE_NEWLINES (line:  37, col:   1):      Consecutive newlines
Error: INCLUDE_START_FILE   (line:  38, col:   1):      Include must be at the start of file
Error: SPACE_REPLACE_TAB    (line:  42, col:   9):      Found space when expecting tab
Error: DECL_ASSIGN_LINE     (line:  42, col:  15):      Declaration and assignation on a single line
Error: SPACE_REPLACE_TAB    (line:  43, col:   9):      Found space when expecting tab
Error: SPACE_EMPTY_LINE     (line:  44, col:   1):      Space on empty line
Error: BRACE_SHOULD_EOL     (line:  49, col:   1):      Expected newline after brace
ft_calloc.c: OK!
ft_strlen.c: OK!
ft_strrchr.c: OK!
libft.h: OK!
ft_strlcat.c: OK!
ft_atoi.c: OK!
ft_memcpy.c: OK!
ft_isprint.c: OK!

✔ Executing: make fclean all (no bonus)
ℹ Executing: libft-war-machine (https://github.com/y3ll0w42/libft-war-machine)
--------------------------------------------------------------------------------
|                              COMPILING LIBFT                                 |
--------------------------------------------------------------------------------
rules:
all        $(NAME)       fclean       re           clean       bonus     libft.a
ok         ok            ok           ok           ok          missing   found

FUNCTION         TESTS                RESULT
ft_isalpha       ✓✓✓✓✓✓✓              OK
ft_isdigit       ✓✓✓✓✓✓✓              OK
ft_isalnum       ✓✓✓✓✓✓✓              OK
ft_isascii       ✓✓✓✓✓✓✓✓             OK
ft_isprint       ✓✓✓✓✓✓✓              OK
ft_strlen        ✓✓✓✓✓✓               OK
ft_memset        ✓✓✓✓                 OK
ft_bzero         ✓✓                   OK
ft_memcpy        ✓✓✓                  OK
ft_memmove       ✓✓✓✓✓                OK
ft_strlcpy       ✓✓✓✓✓                OK
ft_strlcat       ✓✓✓✓✓✓✓✓✓            OK
ft_toupper       ✓✓✓✓✓✓✓              OK
ft_tolower       ✓✓✓✓✓✓✓              OK
ft_strchr        ✓✓✓✓✓✓               OK
ft_strrchr       ✓✓✓✓✓✓✓✓             OK
ft_strncmp       ✓✓✓✓✓✓✓✓✓✓✓          OK
ft_memchr        ✓✓✓✓✓✓               OK
ft_memcmp        ✓✓✓✓✓✓✓✓✓            OK
ft_strnstr       ✓✓✓✓✓✓✓✓✗✓           KO
ft_atoi          ✓✓✓✓✓✓✗✗✗✗✓✓✓✓✓✓✓✓✓  KO
ft_calloc        ✗                    KO
ft_strdup        compil. failed       KO

Abort: A  Bus error: B  Segmentation fault: S  Timeout: T

More information in: /francinette/temp/libft/war-machine/deepthought

Errors in strnstr: /francinette/temp/libft/war-machine/tests/Part1_functions/ft_strnstr
Test 9:
    if (!(str = ft_strnstr("lorem ipsum dolor sit amet", "dolor", 15)))
        ft_print_result("NULL");
    else
        ft_print_result(str);
Expected (cat -e test09.output):
NULL
Your result (cat -e user_output_test09):
dolor sit amet
Errors in atoi: /francinette/temp/libft/war-machine/tests/Part1_functions/ft_atoi
Test 7:
    ft_print_result(ft_atoi("+-54"));
Expected (cat -e test07.output):
0
Your result (cat -e user_output_test07):
-54
Test 8:
    ft_print_result(ft_atoi("-+48"));
Expected (cat -e test08.output):
0
Your result (cat -e user_output_test08):
-48
Test 9:
    ft_print_result(ft_atoi("--47"));
Expected (cat -e test09.output):
0
Your result (cat -e user_output_test09):
47
Test 10:
    ft_print_result(ft_atoi("++47"));
Expected (cat -e test10.output):
0
Your result (cat -e user_output_test10):
47
Errors in calloc: /francinette/temp/libft/war-machine/tests/Part1_functions/ft_calloc
Test 1:
    str = (char *)ft_calloc(30, 1);
    if (!str)
        write(1, "NULL", 4);
    else
        write(1, str, 30);
Expected (cat -e test01.output):
^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@^@
Your result (cat -e user_output_test01):
M->M->M->M->M->M->M->M->M->M->M->M->M->M->M->M->M->M->M->M->M->M->M->M->M->M->M->M->M->M->
✖ Compiling tests: libftTester (https://github.com/Tripouille/libftTester)
tests/ft_strlcpy_test.cpp:28:33: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 8 */ check(ft_strlcpy(dest, "", 42) == 0 && !memcmp("", dest, 1)); showLeaks(); memset(dest, 0, 10);
                                       ^
tests/ft_strlcpy_test.cpp:29:33: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 9 */ check(ft_strlcpy(dest, "1", 0) == 1 && dest[0] == 0); showLeaks(); memset(dest, 'A', 10);
                                       ^
2 warnings generated.
tests/ft_strlcat_test.cpp:39:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 10 */ check(ft_strlcat(dest, "", 15) == 10 && !strcmp(dest, "1111111111")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:41:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 11 */ check(ft_strlcat(dest, "", 42) == 0 && !strcmp(dest, "")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:43:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 12 */ check(ft_strlcat(dest, "", 0) == 0 && !strcmp(dest, "")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:45:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 13 */ check(ft_strlcat(dest, "123", 1) == 3 && !strcmp(dest, "")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:47:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 14 */ check(ft_strlcat(dest, "123", 2) == 3 && !strcmp(dest, "1")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:49:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 15 */ check(ft_strlcat(dest, "123", 3) == 3 && !strcmp(dest, "12")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:51:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 16 */ check(ft_strlcat(dest, "123", 4) == 3 && !strcmp(dest, "123")); showLeaks();
                                        ^
tests/ft_strlcat_test.cpp:53:34: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 17 */ check(ft_strlcat(dest, "123", 0) == 3 && !strcmp(dest, "")); showLeaks();
                                        ^
8 warnings generated.
tests/ft_strchr_test.cpp:23:33: warning: implicit conversion from 'int' to 'char' changes value from 372 to 116 [-Wconstant-conversion]
        /* 5 */ check(ft_strchr(s, 't' + 256) == s); showLeaks();
                      ~~~~~~~~~    ~~~~^~~~~
1 warning generated.
tests/ft_strrchr_test.cpp:26:34: warning: implicit conversion from 'int' to 'char' changes value from 372 to 116 [-Wconstant-conversion]
        /* 6 */ check(ft_strrchr(s, 't' + 256) == s); showLeaks();
                      ~~~~~~~~~~    ~~~~^~~~~
1 warning generated.
tests/ft_strncmp_test.cpp:19:27: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 1 */ check(ft_strncmp("t", "", 0) == 0); showLeaks();
                                 ^
tests/ft_strncmp_test.cpp:19:32: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 1 */ check(ft_strncmp("t", "", 0) == 0); showLeaks();
                                      ^
tests/ft_strncmp_test.cpp:20:27: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 2 */ check(ft_strncmp("1234", "1235", 3) == 0); showLeaks();
                                 ^
tests/ft_strncmp_test.cpp:20:35: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 2 */ check(ft_strncmp("1234", "1235", 3) == 0); showLeaks();
                                         ^
tests/ft_strncmp_test.cpp:21:27: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 3 */ check(ft_strncmp("1234", "1235", 4) < 0); showLeaks();
                                 ^
tests/ft_strncmp_test.cpp:21:35: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 3 */ check(ft_strncmp("1234", "1235", 4) < 0); showLeaks();
                                         ^
tests/ft_strncmp_test.cpp:22:27: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 4 */ check(ft_strncmp("1234", "1235", -1) < 0); showLeaks();
                                 ^
tests/ft_strncmp_test.cpp:22:35: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 4 */ check(ft_strncmp("1234", "1235", -1) < 0); showLeaks();
                                         ^
tests/ft_strncmp_test.cpp:23:27: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 5 */ check(ft_strncmp("", "", 42) == 0); showLeaks();
                                 ^
tests/ft_strncmp_test.cpp:23:31: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 5 */ check(ft_strncmp("", "", 42) == 0); showLeaks();
                                     ^
tests/ft_strncmp_test.cpp:24:27: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 6 */ check(ft_strncmp("Tripouille", "Tripouille", 42) == 0); showLeaks();
                                 ^
tests/ft_strncmp_test.cpp:24:41: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 6 */ check(ft_strncmp("Tripouille", "Tripouille", 42) == 0); showLeaks();
                                               ^
tests/ft_strncmp_test.cpp:25:27: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 7 */ check(ft_strncmp("Tripouille", "tripouille", 42) < 0); showLeaks();
                                 ^
tests/ft_strncmp_test.cpp:25:41: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 7 */ check(ft_strncmp("Tripouille", "tripouille", 42) < 0); showLeaks();
                                               ^
tests/ft_strncmp_test.cpp:26:27: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 8 */ check(ft_strncmp("Tripouille", "TriPouille", 42) > 0); showLeaks();
                                 ^
tests/ft_strncmp_test.cpp:26:41: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 8 */ check(ft_strncmp("Tripouille", "TriPouille", 42) > 0); showLeaks();
                                               ^
tests/ft_strncmp_test.cpp:27:27: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 9 */ check(ft_strncmp("Tripouille", "TripouillE", 42) > 0); showLeaks();
                                 ^
tests/ft_strncmp_test.cpp:27:41: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 9 */ check(ft_strncmp("Tripouille", "TripouillE", 42) > 0); showLeaks();
                                               ^
tests/ft_strncmp_test.cpp:28:28: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 10 */ check(ft_strncmp("Tripouille", "TripouilleX", 42) < 0); showLeaks();
                                  ^
tests/ft_strncmp_test.cpp:28:42: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 10 */ check(ft_strncmp("Tripouille", "TripouilleX", 42) < 0); showLeaks();
                                                ^
tests/ft_strncmp_test.cpp:29:28: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 11 */ check(ft_strncmp("Tripouille", "Tripouill", 42) > 0); showLeaks();
                                  ^
tests/ft_strncmp_test.cpp:29:42: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 11 */ check(ft_strncmp("Tripouille", "Tripouill", 42) > 0); showLeaks();
                                                ^
tests/ft_strncmp_test.cpp:30:28: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 12 */ check(ft_strncmp("", "1", 0) == 0); showLeaks();
                                  ^
tests/ft_strncmp_test.cpp:30:32: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 12 */ check(ft_strncmp("", "1", 0) == 0); showLeaks();
                                      ^
tests/ft_strncmp_test.cpp:31:28: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 13 */ check(ft_strncmp("1", "", 0) == 0); showLeaks();
                                  ^
tests/ft_strncmp_test.cpp:31:33: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 13 */ check(ft_strncmp("1", "", 0) == 0); showLeaks();
                                       ^
tests/ft_strncmp_test.cpp:32:28: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 14 */ check(ft_strncmp("", "1", 1) < 0); showLeaks();
                                  ^
tests/ft_strncmp_test.cpp:32:32: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 14 */ check(ft_strncmp("", "1", 1) < 0); showLeaks();
                                      ^
tests/ft_strncmp_test.cpp:33:28: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 15 */ check(ft_strncmp("1", "", 1) > 0); showLeaks();
                                  ^
tests/ft_strncmp_test.cpp:33:33: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 15 */ check(ft_strncmp("1", "", 1) > 0); showLeaks();
                                       ^
tests/ft_strncmp_test.cpp:34:28: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 16 */ check(ft_strncmp("", "", 1) == 0); showLeaks();
                                  ^
tests/ft_strncmp_test.cpp:34:32: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 16 */ check(ft_strncmp("", "", 1) == 0); showLeaks();
                                      ^
32 warnings generated.
tests/ft_memchr_test.cpp:24:31: warning: implicit conversion from 'int' to 'char' changes value from 258 to 2 [-Wconstant-conversion]
        /* 5 */ check(ft_memchr(s, 2 + 256, 3) == s + 2); showLeaks(); //Cast check
                      ~~~~~~~~~    ~~^~~~~
1 warning generated.
tests/ft_atoi_test.cpp:22:16: error: no matching function for call to 'ft_atoi'
        /* 1 */ check(ft_atoi((e + "1").c_str()) == 1); showLeaks();
                      ^~~~~~~
./libft.h:16:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:23:16: error: no matching function for call to 'ft_atoi'
        /* 2 */ check(ft_atoi((e + "a1").c_str()) == 0); showLeaks();
                      ^~~~~~~
./libft.h:16:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:24:16: error: no matching function for call to 'ft_atoi'
        /* 3 */ check(ft_atoi((e + "--1").c_str()) == 0); showLeaks();
                      ^~~~~~~
./libft.h:16:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:25:16: error: no matching function for call to 'ft_atoi'
        /* 4 */ check(ft_atoi((e + "++1").c_str()) == 0); showLeaks();
                      ^~~~~~~
./libft.h:16:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:26:16: error: no matching function for call to 'ft_atoi'
        /* 5 */ check(ft_atoi((e + "+1").c_str()) == 1); showLeaks();
                      ^~~~~~~
./libft.h:16:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:27:16: error: no matching function for call to 'ft_atoi'
        /* 6 */ check(ft_atoi((e + "-1").c_str()) == -1); showLeaks();
                      ^~~~~~~
./libft.h:16:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:28:16: error: no matching function for call to 'ft_atoi'
        /* 7 */ check(ft_atoi((e + "0").c_str()) == 0); showLeaks();
                      ^~~~~~~
./libft.h:16:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:29:16: error: no matching function for call to 'ft_atoi'
        /* 8 */ check(ft_atoi((e + "+42lyon").c_str()) == 42); showLeaks();
                      ^~~~~~~
./libft.h:16:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:30:16: error: no matching function for call to 'ft_atoi'
        /* 9 */ check(ft_atoi((e + "+101").c_str()) == 101); showLeaks();
                      ^~~~~~~
./libft.h:16:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:31:17: error: no matching function for call to 'ft_atoi'
        /* 10 */ check(ft_atoi((e + to_string(INT_MAX)).c_str()) == INT_MAX); showLeaks();
                       ^~~~~~~
./libft.h:16:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:32:17: error: no matching function for call to 'ft_atoi'
        /* 11 */ check(ft_atoi((e + to_string(INT_MIN)).c_str()) == INT_MIN); showLeaks();
                       ^~~~~~~
./libft.h:16:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:33:25: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 12 */ check(ft_atoi("-+42") == 0); showLeaks();
                               ^
tests/ft_atoi_test.cpp:34:25: warning: ISO C++11 does not allow conversion from string literal to 'char *' [-Wwritable-strings]
        /* 13 */ check(ft_atoi("+-42") == 0); showLeaks();
                               ^
tests/ft_atoi_test.cpp:35:17: error: no matching function for call to 'ft_atoi'
        /* 14 */ check(ft_atoi((string("+") + e + "42").c_str()) == 0); showLeaks();
                       ^~~~~~~
./libft.h:16:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:36:17: error: no matching function for call to 'ft_atoi'
        /* 15 */ check(ft_atoi((string("-") + e + "42").c_str()) == 0); showLeaks();
                       ^~~~~~~
./libft.h:16:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:37:17: error: no matching function for call to 'ft_atoi'
        /* 16 */ check(ft_atoi((string("1") + e + "42").c_str()) == 1); showLeaks();
                       ^~~~~~~
./libft.h:16:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
tests/ft_atoi_test.cpp:38:17: error: no matching function for call to 'ft_atoi'
        /* 17 */ check(ft_atoi((string("-1") + e + "42").c_str()) == -1); showLeaks();
                       ^~~~~~~
./libft.h:16:8: note: candidate function not viable: 1st argument ('const char *') would lose const qualifier
int                             ft_atoi(char *str);
                                ^
2 warnings and 15 errors generated.

Problem compiling tests
✔ Compiling tests: libft-unit-test (https://github.com/alelievr/libft-unit-test)
ℹ Testing:
ft_isalpha      : [OK] 
ft_isdigit      : [OK] 
ft_isalnum      : [OK] 
ft_isascii      : [OK] 
ft_isprint      : [OK] 
ft_strlen       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_memset       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_bzero        : [OK] [OK] [OK] [OK] 
ft_memcpy       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [CRASH] 
[crash]: your memcpy does not behave well with NULL as both params with size

ft_memmove      : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [NO CRASH] [OK] [OK] [CRASH] [OK] 
[no crash]: your memmove does not segfault when null params is sent
[crash]: your memmove does not well with NULL as both parameters and size

ft_strlcpy      : [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strlcat      : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_toupper      : [OK] 
ft_tolower      : [OK] 
ft_strchr       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strrchr      : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strncmp      : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_memchr       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_memcmp       : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_strnstr      : [OK] [OK] [OK] [FAILED] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
[fail]: your strnstr does not work with basic input

ft_atoi         : [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_calloc       : [OK] [OK] [FAILED] [FAILED] [OK] 
[fail]: your calloc don't work with empty string
[fail]: your calloc don't work with 0 size

ft_strdup       : [FAILED] [OK] [OK] [KO] [OK] [OK] [OK] 
[fail]: you didn't protect your malloc return
[KO]: your strdup did not allocate the good size so the \0 test may be false


[crash]: your memcpy does not behave well with NULL as both params with size
 Test code:
        ft_memcpy(((void*)0), ((void*)0), 3);
 
 
 [no crash]: your memmove does not segfault when null params is sent
 Test code:
        char b[0xF0];
 
        ft_memmove(((void*)0), b, 5);
 
 
 [crash]: your memmove does not well with NULL as both parameters and size
 Test code:
        ft_memmove(((void*)0), ((void*)0), 5);
 
 
 [fail]: your strnstr does not work with basic input
 Test code:
        char *big = "abcdef";
        char *little = "abcdefghijklmnop";
        size_t max = strlen(big);
        char *s1 = strnstr(big, little, max);
        char *s2 = ft_strnstr(big, little, max);
 
        if (s1 == s2)
                exit(TEST_SUCCESS);
        exit(TEST_FAILED);
 
 Diffs:
      strnstr: |(null)|
   ft_strnstr: |abcdefghijklmnop|
 
 [fail]: your calloc don't work with empty string
 Test code:
        int size = 8539;
 
        void * d1 = ft_calloc(size, sizeof(int));
        void * d2 = calloc(size, sizeof(int));
        if (memcmp(d1, d2, size * sizeof(int)))
                exit(TEST_FAILED);
        free(d1);
        free(d2);
        exit(TEST_SUCCESS);
 
 Diffs:
 
 
 [fail]: your calloc don't work with 0 size
 Test code:
...

File too large. To see full report open: /francinette/temp/libft/alelievr/result.log

✖ Compiling tests: fsoares (my own)
/usr/bin/ld: ./libft.a(ft_strdup.o): in function `main':
/francinette/temp/libft/__my_srcs/ft_strdup.c:41: multiple definition of `main'; /tmp/cc9nfP4V.o:/francinette/temp/libft/fsoares/test_strdup.c:20: first defined here
collect2: error: ld returned 1 exit status

Problem compiling the tests

Summary: no bonus

Norminette Errors: ft_memmove.c, ft_strdup.c

Missing functions: substr, strjoin, strtrim, split, itoa, strmapi, striteri, putchar_fd, putstr_fd, putendl_fd, putnbr_fd

Failed tests: memcpy, calloc, memmove, libftTester, strnstr, fsoares, atoi, strdup

Passed tests: isalpha, isdigit, isalnum, isascii, isprint, strlen, memset, bzero, strlcpy, strlcat, toupper, tolower, strchr, strrchr, strncmp, memchr, memcmp
